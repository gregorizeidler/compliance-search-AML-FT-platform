/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type EntityType = "ENTITY" | "INDIVIDUAL";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type SanctionsListSource = "EU" | "INTERPOL" | "OFAC" | "UN";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface SanctionedEntities {
  additionalInfo: string | null;
  addresses: Json | null;
  aliases: string[] | null;
  createdAt: Generated<Timestamp | null>;
  dateAdded: Timestamp | null;
  dateOfBirth: Timestamp | null;
  entityType: EntityType;
  id: Generated<number>;
  listSource: SanctionsListSource;
  name: string;
  nationality: string | null;
  placeOfBirth: string | null;
  reason: string | null;
  referenceNumber: string | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface SyncHistory {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  message: string | null;
  recordsAffected: Generated<number | null>;
  source: string;
  status: string;
}

export interface DB {
  sanctionedEntities: SanctionedEntities;
  syncHistory: SyncHistory;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const SanctionsListSourceArrayValues: [SanctionsListSource, ...SanctionsListSource[]] = ["EU","INTERPOL","OFAC","UN"];
export const EntityTypeArrayValues: [EntityType, ...EntityType[]] = ["ENTITY","INDIVIDUAL"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.